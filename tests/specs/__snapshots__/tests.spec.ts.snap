// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests consumer should produce to dead letter topic when target response is 400 1`] = `
{
  "data": "foo",
}
`;

exports[`tests consumer should produce to dead letter topic when target response is 400 2`] = `
{
  "original-topic": "foo4",
  "x-group-id": "test",
}
`;

exports[`tests consumer should produce to retry topic on an unexpected error 1`] = `
{
  "data": "foo",
}
`;

exports[`tests consumer should produce to retry topic on an unexpected error 2`] = `
{
  "original-topic": "foo-45445",
  "x-group-id": "test",
}
`;

exports[`tests consumer should produce to retry topic on an unexpected error 3`] = `
[
  {
    "partitions": [
      {
        "metadata": null,
        "offset": "1",
        "partition": 0,
      },
    ],
    "topic": "foo-45445",
  },
]
`;

exports[`tests consumer should produce to retry topic when target response is 500 1`] = `
{
  "data": "foo",
}
`;

exports[`tests consumer should produce to retry topic when target response is 500 2`] = `
{
  "original-topic": "foo89",
  "x-group-id": "test",
}
`;

exports[`tests should add record headers to target call 1`] = `
{
  "body": {
    "data": "foo",
  },
  "headers": {
    "Accept-Encoding": "gzip",
    "Connection": "keep-alive",
    "Content-Length": "14",
    "Content-Type": "application/json; charset=UTF-8",
    "Host": "mocks:8080",
    "User-Agent": "okhttp/4.11.0",
    "x-b3-flags": "1",
    "x-b3-parentspanid": "101112",
    "x-b3-sampled": "1",
    "x-b3-spanid": "789",
    "x-b3-traceid": "456",
    "x-ot-span-context": "foo",
    "x-record-offset": Any<String>,
    "x-record-original-topic": "foo1",
    "x-record-partition": "0",
    "x-record-timestamp": Any<String>,
    "x-record-topic": "foo1",
    "x-request-id": "123",
  },
  "loggedDate": Any<Number>,
  "method": "POST",
  "queryParams": {},
  "url": "/consume",
}
`;

exports[`tests should produce and consume 1`] = `
{
  "body": {
    "data": "foo",
  },
  "headers": {
    "Accept-Encoding": "gzip",
    "Connection": "keep-alive",
    "Content-Length": "14",
    "Content-Type": "application/json; charset=UTF-8",
    "Host": "mocks:8080",
    "User-Agent": "okhttp/4.11.0",
    "x-record-offset": Any<String>,
    "x-record-original-topic": "foo",
    "x-record-partition": "0",
    "x-record-timestamp": Any<String>,
    "x-record-topic": "foo",
  },
  "loggedDate": Any<Number>,
  "method": "POST",
  "queryParams": {},
  "url": "/consume",
}
`;

exports[`tests should produce and consume 2`] = `
[
  {
    "partitions": [
      {
        "metadata": null,
        "offset": "1",
        "partition": 0,
      },
    ],
    "topic": "foo",
  },
]
`;

exports[`tests should support body headers them to headers of the record 1`] = `
{
  "body": {
    "data": "foo",
    "headers": {
      "x-request-id": "bla",
    },
  },
  "headers": {
    "Accept-Encoding": "gzip",
    "Connection": "keep-alive",
    "Content-Length": "47",
    "Content-Type": "application/json; charset=UTF-8",
    "Host": "mocks:8080",
    "User-Agent": "okhttp/4.11.0",
    "x-record-offset": Any<String>,
    "x-record-original-topic": "foo2",
    "x-record-partition": "0",
    "x-record-timestamp": Any<String>,
    "x-record-topic": "foo2",
    "x-request-id": "bla",
  },
  "loggedDate": Any<Number>,
  "method": "POST",
  "queryParams": {},
  "url": "/consume",
}
`;

exports[`tests should transform and add cloud event headers to target call 1`] = `
{
  "body": {
    "data": "foo",
  },
  "headers": {
    "Accept-Encoding": "gzip",
    "Connection": "keep-alive",
    "Content-Length": "14",
    "Content-Type": "application/json; charset=UTF-8",
    "Host": "mocks:8080",
    "User-Agent": "okhttp/4.11.0",
    "ce-id": "id",
    "ce-source": "source",
    "ce-specversion": "1",
    "ce-time": "123456",
    "ce-type": "type",
    "random_header": "random",
    "x-record-offset": Any<String>,
    "x-record-original-topic": "foo2",
    "x-record-partition": "0",
    "x-record-timestamp": Any<String>,
    "x-record-topic": "foo2",
    "x-request-id": "bla",
  },
  "loggedDate": Any<Number>,
  "method": "POST",
  "queryParams": {},
  "url": "/consume",
}
`;
